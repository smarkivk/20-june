class Animal {
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Dog barks");
    }
}
//In this example, the Animal class has a method called makeSound().
The Dog class extends Animal and overrides the makeSound() method by using @Override annotation.
This indicates that the makeSound() method in the Dog class is intended to override the makeSound() method in the Animal class.

Using @Override is not mandatory, but it is considered good practice as 
it helps to catch errors at compile-time if the method you are trying to override 
\doesn't exist in the superclass or if you misspell the method name. 
It also improves code readability by making it clear that a method is intended to override a superclass method.
